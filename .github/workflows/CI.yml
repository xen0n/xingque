# This file is autogenerated by maturin v1.6.0
# To update, run
#
#    maturin generate-ci --pytest github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  coverage:
    name: Test coverage
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          cache: pip
      - name: Setup Rust
        run: |
          rustup toolchain install stable --profile minimal -c llvm-tools
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Setup caching for Rust
        uses: Swatinem/rust-cache@v2
        # the cache is already keyed by Rust toolchain version that contains OS
        # OS and arch info, so no further customization is needed.
        # with:
        #   key: coverage-cargo-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
        continue-on-error: true
      - name: Setup test environment
        run: |
          python -m venv .venv
          .venv/bin/pip install maturin pytest
      - name: Build wheel with coverage instrumentation
        run: |
          . .venv/bin/activate
          . <(cargo llvm-cov show-env --export-prefix)
          cargo llvm-cov clean --workspace
          maturin develop
      - name: Run pytest and collect coverage
        shell: bash
        run: |
          . .venv/bin/activate
          . <(cargo llvm-cov show-env --export-prefix)
          pytest
          cargo llvm-cov report --release --lcov --output-path coverage.lcov
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}

  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # CPython
          - runner: ubuntu-latest
            target: x86_64
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: x86
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: aarch64
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: armv7
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: s390x
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: ppc64le
            interpreter: '3.x'
          # PyPy
          - runner: ubuntu-latest
            target: x86_64
            interpreter: pypy3.9
          - runner: ubuntu-latest
            target: x86
            interpreter: pypy3.9
          - runner: ubuntu-latest
            target: aarch64
            interpreter: pypy3.9
          - runner: ubuntu-latest
            target: x86_64
            interpreter: pypy3.10
          - runner: ubuntu-latest
            target: x86
            interpreter: pypy3.10
          - runner: ubuntu-latest
            target: aarch64
            interpreter: pypy3.10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.platform.interpreter }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist ${{ startsWith(matrix.platform.interpreter, 'pypy') && format('--interpreter {0}', matrix.platform.interpreter) || '-F pyo3/abi3,pyo3/abi3-py38' }}
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-${{ matrix.platform.interpreter }}
          path: dist
      - name: pytest
        if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
        shell: bash
        run: |
          set -e
          which python3
          python3 -m venv .venv
          source .venv/bin/activate
          pip install xingque --no-index --find-links dist --force-reinstall
          pip install pytest
          pytest
      - name: pytest
        if: ${{ !startsWith(matrix.platform.target, 'x86') && matrix.platform.target != 'ppc64' && !startsWith(matrix.platform.interpreter, 'pypy') }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip pytest
          run: |
            set -e
            pip3 install xingque --no-index --find-links dist --force-reinstall
            pytest

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # CPython
          - runner: ubuntu-latest
            target: x86_64
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: x86
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: aarch64
            interpreter: '3.x'
          - runner: ubuntu-latest
            target: armv7
            interpreter: '3.x'
          # PyPy
          - runner: ubuntu-latest
            target: x86_64
            interpreter: pypy3.9
          - runner: ubuntu-latest
            target: x86
            interpreter: pypy3.9
          - runner: ubuntu-latest
            target: aarch64
            interpreter: pypy3.9
          - runner: ubuntu-latest
            target: x86_64
            interpreter: pypy3.10
          - runner: ubuntu-latest
            target: x86
            interpreter: pypy3.10
          - runner: ubuntu-latest
            target: aarch64
            interpreter: pypy3.10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.platform.interpreter }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist ${{ startsWith(matrix.platform.interpreter, 'pypy') && format('--interpreter {0}', matrix.platform.interpreter) || '-F pyo3/abi3,pyo3/abi3-py38' }}
          sccache: 'true'
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}-${{ matrix.platform.interpreter }}
          path: dist
      - name: pytest
        if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            set -e
            apk add py3-pip py3-virtualenv
            which python3
            which pypy3 || true
            python3 -m virtualenv .venv
            source .venv/bin/activate
            pip install xingque --no-index --find-links dist --force-reinstall
            pip install pytest
            pytest
      - name: pytest
        if: ${{ !startsWith(matrix.platform.target, 'x86') }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform.target }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-virtualenv
          run: |
            set -e
            which python3
            which pypy3 || true
            python3 -m virtualenv .venv
            source .venv/bin/activate
            pip install pytest
            pip install xingque --no-index --find-links dist --force-reinstall
            pytest

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # CPython
          - runner: windows-latest
            target: x64
            interpreter: '3.x'
          - runner: windows-latest
            target: x86
            interpreter: '3.x'
          # PyPy
          - runner: windows-latest
            target: x64
            interpreter: 'pypy3.9'
          - runner: windows-latest
            target: x64
            interpreter: 'pypy3.10'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.platform.interpreter }}
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          # It seems unneeded to force interpreter on Windows, but we need abi3
          # for non-PyPy
          args: --release --out dist ${{ startsWith(matrix.platform.interpreter, 'pypy') && '' || '-F pyo3/abi3,pyo3/abi3-py38' }}
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}-${{ matrix.platform.interpreter }}
          path: dist
      - name: pytest
        if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}
        shell: bash
        run: |
          set -e
          which python3
          python3 -m venv .venv
          source .venv/Scripts/activate
          pip install xingque --no-index --find-links dist --force-reinstall
          pip install pytest
          pytest

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-12
            target: x86_64
          - runner: macos-14
            target: aarch64
        interpreter:
          - '3.x'
          - pypy3.9
          - pypy3.10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.interpreter }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist ${{ startsWith(matrix.interpreter, 'pypy') && format('--interpreter {0}', matrix.interpreter) || '-F pyo3/abi3,pyo3/abi3-py38' }}
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}-${{ matrix.interpreter }}
          path: dist
      - name: pytest
        run: |
          set -e
          which python3
          python3 -m venv .venv
          source .venv/bin/activate
          pip install xingque --no-index --find-links dist --force-reinstall
          pip install pytest
          pytest

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, musllinux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
